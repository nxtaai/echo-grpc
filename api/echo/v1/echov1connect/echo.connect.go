// Copyright 2023 The Echo gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: echo/v1/echo.proto

package echov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nxtaai/echo-grpc/api/echo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EchoAPIName is the fully-qualified name of the EchoAPI service.
	EchoAPIName = "echo.v1.EchoAPI"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EchoAPIEchoProcedure is the fully-qualified name of the EchoAPI's Echo RPC.
	EchoAPIEchoProcedure = "/echo.v1.EchoAPI/Echo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	echoAPIServiceDescriptor    = v1.File_echo_v1_echo_proto.Services().ByName("EchoAPI")
	echoAPIEchoMethodDescriptor = echoAPIServiceDescriptor.Methods().ByName("Echo")
)

// EchoAPIClient is a client for the echo.v1.EchoAPI service.
type EchoAPIClient interface {
	// Echos what you send it.
	//
	// This API takes a simple message and returns the same message back.
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
}

// NewEchoAPIClient constructs a client for the echo.v1.EchoAPI service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoAPIClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EchoAPIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &echoAPIClient{
		echo: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+EchoAPIEchoProcedure,
			connect.WithSchema(echoAPIEchoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// echoAPIClient implements EchoAPIClient.
type echoAPIClient struct {
	echo *connect.Client[v1.EchoRequest, v1.EchoResponse]
}

// Echo calls echo.v1.EchoAPI.Echo.
func (c *echoAPIClient) Echo(ctx context.Context, req *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// EchoAPIHandler is an implementation of the echo.v1.EchoAPI service.
type EchoAPIHandler interface {
	// Echos what you send it.
	//
	// This API takes a simple message and returns the same message back.
	Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
}

// NewEchoAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoAPIHandler(svc EchoAPIHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	echoAPIEchoHandler := connect.NewUnaryHandler(
		EchoAPIEchoProcedure,
		svc.Echo,
		connect.WithSchema(echoAPIEchoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/echo.v1.EchoAPI/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EchoAPIEchoProcedure:
			echoAPIEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEchoAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoAPIHandler struct{}

func (UnimplementedEchoAPIHandler) Echo(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("echo.v1.EchoAPI.Echo is not implemented"))
}
